# AUTOGENERATED! DO NOT EDIT! File to edit: ../lib_nbs/03_Imputation.ipynb.

# %% auto 0
__all__ = ['GPFAImputation']

# %% ../lib_nbs/03_Imputation.ipynb 4
from .learner import *
from .data_preparation import *

import torch

import pandas as pd
import numpy as np
import sklearn
from sklearn.metrics import mean_squared_error, r2_score

from fastcore.foundation import patch

import matplotlib.pyplot as plt
import altair as alt
from altair import datum

from functools import lru_cache

# %% ../lib_nbs/03_Imputation.ipynb 18
class GPFAImputation:
    def __init__(
        self,
        data: pd.DataFrame , #observed data with missing data as NA
        complete_data: pd.DataFrame = None, # Optional complete dataframe (for testing)
        latent_dims = 1,
        cuda = True # Use GPU?
    ):
        self.data = data
        self.data_complete = complete_data # TODO polish this, is this tidy or wide? check has required cols
        
        device = 'cuda' if cuda else 'cpu'
        
        self.T = torch.arange(0, len(data), dtype=torch.float32, device=device) # time is encoded with a increase of 1
        
        # Training data
        self.train_idx = ~self.data.isna().any(axis=1)
        self.train_data = torch.tensor(self.data[self.train_idx].to_numpy().astype(np.float32), device=device)
        self.train_T = self.T[self.train_idx]
        
        self.learner = GPFALearner(X = self.train_data, T = self.train_T, latent_dims=latent_dims)
        

        # Prediction data
        self.pred_T = self.T[~self.train_idx]
        self.cond_idx = torch.tensor(~self.data[~self.train_idx].isna().to_numpy().flatten(), device=device) # conditional obsevations
        self.cond_obs = torch.tensor(self.data[~self.train_idx].to_numpy().astype(np.float32).flatten()[self.cond_idx.cpu()], device=device)
        
        if cuda: self.learner.cuda()
        
        
    @lru_cache
    def impute(self,
               add_time = True, # add column with time?
               tidy = True # tidy data?
               ):
        
        if not hasattr(self, "pred"):
            self.learner.train()
            self.pred = self.learner.predict(self.pred_T, obs = self.cond_obs, idx = self.cond_idx)
        
        if tidy: return self._impute_tidy(add_time)
        else: return self._impute_wide(add_time)
        
        
    def _impute_wide(self, add_time):
        """ Impute in wide format"""
        
        imp_data = self.data.copy()
        for col_idx, col_name in enumerate(imp_data.columns):
            imp_data.loc[~self.train_idx, col_name] = self.pred.mean[:, col_idx].cpu().numpy()
            imp_data.loc[~self.train_idx, col_name + "_std"] = self.pred.std[:, col_idx].cpu().numpy()
        
        idx_vars = []
        if add_time:
            imp_data["time"] = self.T.cpu()
            idx_vars.append("time")
        
        return imp_data 
    
    def _impute_tidy(self, add_time):
        """ transform the pred output into a tidy dataframe suitable for plotting"""
        feature_names = self.data.columns

        pred_mean = pd.DataFrame(self.pred.mean.cpu(), columns = feature_names).assign(time = self.pred_T.cpu()).melt("time", value_name="mean")
        pred_std = pd.DataFrame(self.pred.std.cpu(), columns = feature_names).assign(time = self.pred_T.cpu()).melt("time", value_name="std")
        
        pred = pd.merge(pred_mean, pred_std, on=['time', 'variable'])  
        
        train_data = self.data[self.train_idx].assign(time = self.train_T.cpu()).melt("time", value_name = "mean")
               
        imp_data = pd.concat((train_data, pred))
        
        self.pred_wide = imp_data
        
        return imp_data
    

# %% ../lib_nbs/03_Imputation.ipynb 29
def _plot_variable(imp, complete, variable, y_label="", sel=None, properties = {}):
    
    imp = imp[imp.variable == variable]

    
    error = alt.Chart(imp).mark_errorband().encode(
        x = "time",    
        y = alt.Y("err_low:Q", title = y_label, scale=alt.Scale(zero=False)),
        y2 = "err_high:Q",
        color=alt.Color("variable",
                        legend = alt.Legend(title=["Line: pred. mean", "area: +/- 2 std", "(variable)"])
                       ),
        tooltip = alt.Tooltip(['std', 'mean'], format=".4")
    ).transform_calculate(
        err_low = "datum.mean - 2 * datum.std",
        err_high = "datum.mean + 2 * datum.std"
    ).properties( **properties)

    pred = alt.Chart(imp).mark_line().encode(
        x = "time",    
        y = alt.Y("mean:Q", title = y_label, scale=alt.Scale(zero=False)),
        color="variable",
    ).add_selection(
        sel if sel is not None else alt.selection_interval(bind="scales")
    ).properties(title = variable)

    base_plot = error + pred
    
    if complete is not None:

        complete = complete[complete.variable == variable]
        truth_plt = alt.Chart(complete).mark_point(
            color='black',
            strokeWidth = 1,
            fillOpacity = 1
        ).encode(
            x = "time",
            y = alt.Y("value", title = y_label, scale=alt.Scale(zero=False)),
            fill= alt.Fill("is_missing", scale = alt.Scale(range=["#ffffff00", "black"]),
                           legend = alt.Legend(title =["Observed data","(is missing)"])),
            shape = "is_missing",
        )

        base_plot = truth_plt + base_plot
        
    return base_plot
    

# %% ../lib_nbs/03_Imputation.ipynb 31
@patch()
def plot_pred(
    self: GPFAImputation,
    complete = True, # Optional true data to be plotted agaist predictions
    units: dict = None, # Optional dict where keys are col name and value the unit (y axis labels)
    n_cols: int = 2,
    bind_interaction: bool =True, # Whether the sub-plots for each variable should be connected for zooming/panning
    properties:dict = {} # addtional properties (eg. size) for altair plot
):
    "Plot the prediction for each variable, optionally including true values"
    imp = self._impute_tidy(add_time=True) if hasattr(self, "pred") else self.impute(tidy=True, add_time=True)
    
   
    plot_list = [alt.hconcat() for _ in range(0, imp.shape[0], n_cols)]
    selection_scale = alt.selection_interval(bind="scales", encodings=['x']) if bind_interaction else None
    for idx, variable in enumerate(pd.unique(imp.variable)):
        plot_list[idx // n_cols] |= _plot_variable(imp,
                                                   self.data_complete if complete else None,
                                                   variable,
                                                   y_label = f"{variable} [{units[variable]}]" if units is not None else variable,
                                                   sel = selection_scale, properties=properties)
    
    plot = alt.vconcat(*plot_list)
    
    return plot

# %% ../lib_nbs/03_Imputation.ipynb 36
@patch
def __repr__(self: GPFAImputation):
    return f"""GPFA Imputation:
    N obs: {self.data.shape[0]}
    N features {self.data.shape[1]} ({', '.join(self.data.columns)})
    N missing observations {(~self.cond_idx).sum()}"""

@patch
def __str__(self: GPFAImputation):
    return self.__repr__()

# %% ../lib_nbs/03_Imputation.ipynb 40
@patch
def compute_metric(self: GPFAImputation,
                   metric, # function that takes as argument true and pred and returns the metric
                   metric_name = 'metric'):
    pred = self.impute(tidy=True, add_time=True)
    
    df = pd.merge(pred, self.data_complete, on = ['time','variable'])
    
    vars = []
    
    for var in df.variable.unique():
        df_var = df[df.variable == var]
        vars.append({'variable': var,
                      metric_name: metric(df_var['value'], df_var['mean'])})
    
    return pd.DataFrame(vars)

# %% ../lib_nbs/03_Imputation.ipynb 41
@patch
def rmse(self: GPFAImputation):
    
    return self.compute_metric(lambda x, y: np.sqrt(mean_squared_error(x,y)), "rmse")
    

# %% ../lib_nbs/03_Imputation.ipynb 43
@patch
def r2(self: GPFAImputation):
    return self.compute_metric(r2_score, "r2")
