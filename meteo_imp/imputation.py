# AUTOGENERATED! DO NOT EDIT! File to edit: ../lib_nbs/kalman/01_Kalman_Imputation.ipynb.

# %% auto 0
__all__ = ['KalmanImputation']

# %% ../lib_nbs/kalman/01_Kalman_Imputation.ipynb 3
import pandas as pd
from .kalman.model import KalmanModel, LocalLevelModel
from .results import ImputationResult
from .utils import *
from fastcore.basics import store_attr, patch
from numpy.ma import masked_array
import numpy as np

# %% ../lib_nbs/kalman/01_Kalman_Imputation.ipynb 8
class KalmanImputation:
    """Imputation using a kalman model"""
    def __init__(self, data: pd.DataFrame,
                 model: KalmanModel, # a subclass of MLEModel tto be used as model
                 # model_args: dict = {}, # Optional args for model
                 pred_all: bool = False, # If the dataset should be replaced by the model predictions
                ):
        self.data = data
        self.train_idx = ~self.data.isna().any(axis=1)
        # uses numpy maskes for pykalman
        self.train_data = masked_array(self.data.to_numpy(), mask = data.isna())
        self.T = np.arange(self.data.shape[0])
        self.model = model(self.train_data)
    def fit(self) -> 'KalmanImputation':
        """Fit model parameters"""
        self.model.fit()
        return self

    def impute(self,
               pred_all = False # If the dataset should be replaced by the model predictions
                                # or only the gaps imputed using the model
              ):
        """Impute data in tidy format using model"""
        # predict either no all dataset or only on part
        if pred_all:
            time_mask = self.T
            data_mask = np.ones_like(self.train_idx, dtype=bool)
        else:
            time_mask = self.T[~self.train_idx]
            data_mask = ~self.train_idx

        pred = self.model.predict(time_mask)
        
        imp_mean = self.data.copy()
        imp_mean[data_mask] = pred.mean
        imp_mean = imp_mean.assign(time=self.T).melt('time', value_name = 'mean')
        
        imp_std = pd.DataFrame(np.zeros_like(self.data), columns=self.data.columns)
        imp_std[data_mask] = np.diagonal(np.sqrt(pred.cov), axis1=1, axis2=2)
        imp_std = imp_std.assign(time=self.T).melt('time',value_name = 'std')
        
        return pd.merge(imp_mean, imp_std, on=['time', 'variable'])       

# %% ../lib_nbs/kalman/01_Kalman_Imputation.ipynb 17
@patch
def to_result(self: KalmanImputation, data_compl, var_names=None, units=None, pred_all=False):
    return ImputationResult(self.impute(pred_all), data_compl, self.model.get_info(var_names), units)
