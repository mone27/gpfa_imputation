# AUTOGENERATED! DO NOT EDIT! File to edit: ../lib_nbs/99_utils.ipynb.

# %% auto 0
__all__ = ['ListNormal', 'Normal', 'cache_disk', 'reset_seed', 'test_close', 'array2df', 'display_as_row', 'cov2std']

# %% ../lib_nbs/99_utils.ipynb 3
# dill is an improved version of pickle, using it to support namedtuples
import dill
from pathlib import Path
import inspect
import hashlib

# %% ../lib_nbs/99_utils.ipynb 5
# inspired from https://gist.github.com/shantanuo/c6a376309d6bac6bd55bf77e3961b5fb
def cache_disk(base_file, rm_cache=False):
    "Decorator to cache function output to disk"
    base_file = Path(base_file)
    def decorator(original_func):
        
        f_hash = hashlib.md5(inspect.getsource(original_func).encode()).hexdigest()
        filename = base_file.parent / (base_file.stem + f_hash + ".pickle")
        
        if rm_cache: filename.unlink()
        
        try:
            cache = dill.load(open(filename, 'rb'))
        except (IOError, ValueError):
            cache = {}

        def save_data():
            dill.dump(cache, open(filename, "wb"))  

        def new_func(*args):
            if tuple(args) not in cache:
                cache[tuple(args)] = original_func(*args)
                save_data()
            return cache[args]

        return new_func

    return decorator

# %% ../lib_nbs/99_utils.ipynb 17
import torch
import numpy as np

# %% ../lib_nbs/99_utils.ipynb 18
def reset_seed(seed=27):
    torch.manual_seed(seed)
    np.random.seed(seed)

# %% ../lib_nbs/99_utils.ipynb 19
def reset_seed(seed=27):
    torch.manual_seed(seed)
    np.random.seed(seed)

# %% ../lib_nbs/99_utils.ipynb 21
from collections import namedtuple
from fastcore.basics import patch

# %% ../lib_nbs/99_utils.ipynb 22
ListNormal = namedtuple('ListNormal', ['mean', 'cov'])

# %% ../lib_nbs/99_utils.ipynb 23
Normal = namedtuple('Normal', ['mean', 'cov'])

# %% ../lib_nbs/99_utils.ipynb 24
@patch
def get_nth(self: ListNormal, n:int
           )->Normal:
    """Get the mean and cov for the nth Normal distribution in the list """
    return Normal(self.mean[n], self.cov[n])

# %% ../lib_nbs/99_utils.ipynb 25
@patch
def detach(self: ListNormal)->ListNormal:
    """Detach both mean and cov at once """
    return ListNormal(self.mean.detach(), self.cov.detach())

# %% ../lib_nbs/99_utils.ipynb 27
from typing import Generator, Iterable
from functools import partial
from fastcore.test import test
from fastcore.basics import patch

# %% ../lib_nbs/99_utils.ipynb 28
def is_close(a,b,eps=1e-5):
    "Is `a` within `eps` of `b`"
    if hasattr(a, '__array__') or hasattr(b,'__array__'):
        a = torch.as_tensor(a)
        b = torch.as_tensor(b)
        return (abs(a-b)<eps).all()
    if isinstance(a, (Iterable,Generator)) or isinstance(b, (Iterable,Generator)):
        return all(is_close(a_, b_, eps) for a_,b_ in zip(a,b))
    return abs(a-b)<eps

# %% ../lib_nbs/99_utils.ipynb 29
def test_close(a,b,eps=1e-5):
    "`test` that `a` is within `eps` of `b`"
    test(a,b,partial(is_close,eps=eps),'close')

# %% ../lib_nbs/99_utils.ipynb 32
from collections import namedtuple
from fastcore.basics import patch
from sklearn.preprocessing import StandardScaler

# %% ../lib_nbs/99_utils.ipynb 38
@patch
def inverse_transform_std(self: StandardScaler, 
                         x_std # standard deviations
                        ):
    return x_std * self.scale_

# %% ../lib_nbs/99_utils.ipynb 40
from torch import Tensor
from typing import Collection
import pandas as pd

from IPython.display import HTML
from IPython.display import display

# %% ../lib_nbs/99_utils.ipynb 41
def array2df(x: Tensor, # 2d tensor
             row_names: Collection[str]|None, # names for the row
             col_names: Collection[str]|None, # names for the columns
             row_var: str # name of the first column (the one with row names). This should describe the values of `row_name`
            ):
    df = pd.DataFrame(x.detach().cpu().numpy(), columns=col_names)
    if row_names is not None: df.insert(0, row_var, row_names)
    return df

# %% ../lib_nbs/99_utils.ipynb 42
def _style_df(df):
    """style dataframe for better printing """
    return df.style.hide(axis="index").format(precision = 4)

def display_as_row(dfs: dict[str, pd.DataFrame], title="", styler=_style_df):
    """display multiple dataframes in the same row"""
    out = []
    for df_title, df in dfs.items():
        df_html = _style_df(df).to_html()
        out.append(f"<div> <p style='font-size: 1.3rem;'>{df_title}</p> {df_html} </div>")
    out = f"<div style=\"display: flex; column-gap: 20px; flex-wrap: wrap;\" class='table table-striped table-sm'> {''.join(out)}</div>"
    display(HTML(f"<p style='font-size: 1.5rem; font-decoration: bold'>{title}<p>" + "".join(out)))

# %% ../lib_nbs/99_utils.ipynb 50
def cov2std(x):
    "convert cov of array of covariances to array of stddev"
    return torch.diagonal(torch.sqrt(x), dim1=1, dim2=2)
